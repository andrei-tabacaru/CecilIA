import os
import vertexai
from vertexai.generative_models import GenerativeModel, Part
 
from prompt import generate_prompt
from user import UserProfile
from utils import parse_scenario

PROJECT_ID = 'text-based-generative-game-ai'
LOCATION = 'europe-west1'
# API_KEY = os.environ.get("GOOGLE_APPLICATION_CREDENTIALS")

def generate_scenario(user_profile: UserProfile) -> str:
    """
    Generates a scenario using the Gemini API based on the user's profile.

    Args:
        user_profile: The UserProfile object representing the current game state.

    Returns:
        A string containing the generated scenario from Gemini, or None if an error occurred.
    """
    try:
        vertexai.init(project=PROJECT_ID, location=LOCATION)
        model = GenerativeModel("gemini-1.5-pro-preview-0409")
        prompt = generate_prompt(user_profile)

        response = model.generate_content(
            [Part.from_text(prompt)],
            generation_config={
                'max_output_tokens': 2048,
                'temperature': 0.9,
                'top_p': 1
            }
        )

        return response.text
    except Exception as e:
        print(f"An error occurred during scenario generation: {e}")
        return None

def generate_outcome(user: UserProfile, scenario_text: str, choice: str) -> str:
    """
    Generates an outcome for the user's choice using the Gemini API, 
    based ONLY on the provided scenario and choice.

    Args:
        user: The UserProfile object.
        scenario_text: The full text of the most recent scenario, including choices.
        choice: The choice made by the user (A, B, C, etc.).

    Returns:
        The outcome text generated by Gemini.
    """
    try:
        vertexai.init(project=PROJECT_ID, location=LOCATION)
        model = GenerativeModel("gemini-1.5-pro-preview-0409")

        # Extract the scenario description
        scenario_description, _, _ = parse_scenario(scenario_text)

        prompt = (
            f"Scenario: {scenario_description}\n"
            f"The character {user.name}, at age {user.age}, made the following choice: {choice}\n"
            f"Their current attributes are:\n"
            f"- Health: {user.attributes['health']}\n"
            f"- Wealth: {user.attributes['wealth']}\n"
            f"- Happiness: {user.attributes['happiness']}\n"
            f"- Intelligence: {user.attributes['intelligence']}\n\n"
            f"Generate a short narrative that describes what happens immediately after this choice is made. "
            f"Focus on the immediate consequences and how the character reacts, based on the given scenario and choice. "
            "Do not introduce a new scenario or choices. "
        )

        response = model.generate_content(
            [Part.from_text(prompt)],
            generation_config={
                'max_output_tokens': 2048,
                'temperature': 0.9,
                'top_p': 1
            }
        )

        return response.text
    except Exception as e:
        print(f"An error occurred during outcome generation: {e}")
        return None

